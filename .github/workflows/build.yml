name: SonarQube Scan and Auto Merge PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: write

jobs:
  sonarqube-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    outputs:
      quality_passed: ${{ steps.fetch-metrics.outputs.quality_passed }}
      quality_status: ${{ steps.fetch-metrics.outputs.quality_status }}
      coverage: ${{ steps.fetch-metrics.outputs.coverage }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Repository Structure
        run: |
          echo "Listing files in the working directory:"
          ls -la

      - name: Ensure package.json Exists
        run: |
          if [ ! -f "package.json" ]; then
            echo "ERROR: package.json not found! Ensure you are in the correct working directory."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies and Generate Coverage
        run: |
          npm install
          npm run test -- --coverage
          ls -la coverage/
          cat coverage/lcov.info || echo "No coverage file found"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=sonar
            -Dsonar.projectName="Sonar Samples"
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.qualitygate.wait=true
            -Dsonar.analysis.allowEmpty=false
            -Dsonar.coverage.exclusions=**/node_modules/**,**/test/**
            -Dsonar.cpd.exclusions=**/node_modules/**

      - name: Install jq and bc
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch Code Quality Metrics
        id: fetch-metrics
        run: |
          sleep 20
          
          PROJECT_KEY="sonar"
          RETRY_COUNT=0
          MAX_RETRIES=5
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT+1)) to fetch metrics..."
            
            PROJECT_EXISTS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "${{ secrets.SONAR_HOST_URL }}/api/projects/search?projects=$PROJECT_KEY" | \
              jq -r '.components[0].key // empty')
            
            if [ -z "$PROJECT_EXISTS" ]; then
              echo "Project not found, retrying..."
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 10
              continue
            fi
            
            QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | \
              jq -r '.projectStatus.status // "ERROR"')
            
            METRICS_RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage,duplicated_lines_density,bugs,vulnerabilities,code_smells")

            if echo "$METRICS_RESPONSE" | jq -e '.errors' > /dev/null; then
              ERROR_MSG=$(echo "$METRICS_RESPONSE" | jq -r '.errors[0].msg')
              echo "ERROR: $ERROR_MSG"
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 10
              continue
            fi
            
            COVERAGE=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[]? | select(.metric == "coverage").value? // "0"')
            DUPLICATION=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[]? | select(.metric == "duplicated_lines_density").value? // "0"')
            BUGS=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[]? | select(.metric == "bugs").value? // "0"')
            VULNERABILITIES=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[]? | select(.metric == "vulnerabilities").value? // "0"')
            CODE_SMELLS=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[]? | select(.metric == "code_smells").value? // "0"')
            
            if [ -n "$COVERAGE" ] && [ -n "$QUALITY_GATE_STATUS" ]; then
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              sleep 10
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to fetch metrics"
            COVERAGE="0"
            QUALITY_GATE_STATUS="ERROR"
          fi

          echo "quality_passed=$( [ "$QUALITY_GATE_STATUS" = "OK" ] && [ "$(echo "$COVERAGE >= 95" | bc -l)" -eq 1 ] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: needs.sonarqube-scan.outputs.quality_passed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Auto Merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          gh pr merge $PR_NUMBER --auto --squash
          echo "PR #$PR_NUMBER merged successfully!"

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: always()
    steps:
      - name: Display Quality Status
        run: |
          echo "Quality Status: ${{ needs.sonarqube-scan.outputs.quality_status }}"
          echo "Coverage: ${{ needs.sonarqube-scan.outputs.coverage }}%"
          echo "Quality Check Passed: ${{ needs.sonarqube-scan.outputs.quality_passed }}"
