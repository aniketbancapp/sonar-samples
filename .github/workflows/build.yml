name: SonarQube Scan and Auto Merge PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: write

jobs:
  sonarqube-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    outputs:
      quality_passed: ${{ steps.fetch-metrics.outputs.quality_passed }}
      quality_status: ${{ steps.fetch-metrics.outputs.quality_status }}
      coverage: ${{ steps.fetch-metrics.outputs.coverage }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies and run tests with coverage
        run: |
          npm install
          npm run test -- --coverage
          ls -la coverage/
          cat coverage/lcov.info || echo "No coverage file found"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=aniketbancapp_sonar-samples
            -Dsonar.projectName="Sonar Samples"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.scm.provider=git
            -Dsonar.analysis.allowEmpty=false
            -Dsonar.qualitygate.wait=true

      - name: Install jq and bc
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Fetch Code Quality Metrics
        id: fetch-metrics
        run: |
          # Wait for analysis to complete
          sleep 15
          
          PROJECT_KEY="aniketbancapp_sonar-samples"
          
          # Get quality gate status
          QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | \
            jq -r '.projectStatus.status')
            
          # Get all metrics in one API call
          METRICS_RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage,duplicated_lines_density,bugs,vulnerabilities,code_smells")
          
          # Parse metrics
          COVERAGE=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[] | select(.metric == "coverage").value // "0"')
          DUPLICATION=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[] | select(.metric == "duplicated_lines_density").value // "0"')
          BUGS=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[] | select(.metric == "bugs").value // "0"')
          VULNERABILITIES=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[] | select(.metric == "vulnerabilities").value // "0"')
          CODE_SMELLS=$(echo "$METRICS_RESPONSE" | jq -r '.component.measures[] | select(.metric == "code_smells").value // "0"')

          # Create quality status message
          QUALITY_STATUS_MESSAGE=$(cat <<EOF
          SonarQube Quality Report:
          - Quality Gate Status: $QUALITY_GATE_STATUS
          - Code Coverage: $COVERAGE%
          - Duplication: $DUPLICATION%
          - Bugs: $BUGS
          - Vulnerabilities: $VULNERABILITIES
          - Code Smells: $CODE_SMELLS
          EOF
          )

          # Output to GitHub job summary
          echo "### SonarQube Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate Status | $QUALITY_GATE_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage | $COVERAGE% |" >> $GITHUB_STEP_SUMMARY
          echo "| Duplication | $DUPLICATION% |" >> $GITHUB_STEP_SUMMARY
          echo "| Bugs | $BUGS |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerabilities | $VULNERABILITIES |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Smells | $CODE_SMELLS |" >> $GITHUB_STEP_SUMMARY

          echo "$QUALITY_STATUS_MESSAGE"
          
          # Check if coverage is above 95% and quality gate passed
          if (( $(echo "$COVERAGE >= 95" | bc -l) )) && [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            echo "quality_passed=true" >> $GITHUB_OUTPUT
          else
            echo "quality_passed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "quality_status<<EOF" >> $GITHUB_OUTPUT
          echo "$QUALITY_STATUS_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: needs.sonarqube-scan.outputs.quality_passed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Display Quality Status
        run: |
          echo "${{ needs.sonarqube-scan.outputs.quality_status }}"
          echo "Coverage: ${{ needs.sonarqube-scan.outputs.coverage }}%"

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Auto Merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          gh pr merge $PR_NUMBER --auto --squash
          echo "PR #$PR_NUMBER merged successfully!"

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: always()
    steps:
      - name: Display Quality Status
        run: |
          echo "${{ needs.sonarqube-scan.outputs.quality_status }}"
          echo "Coverage: ${{ needs.sonarqube-scan.outputs.coverage }}%"
          echo "Quality Check Passed: ${{ needs.sonarqube-scan.outputs.quality_passed }}"
