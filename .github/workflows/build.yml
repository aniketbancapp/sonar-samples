name: SonarQube Scan and Auto Merge PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  pull-requests: write
  contents: write

jobs:
  # Job for SonarQube scan
  sonarqube-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    outputs:
      quality_passed: ${{ steps.fetch-metrics.outputs.quality_passed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=aniketbancapp_sonar-samples
            -Dsonar.projectName="Sonar Samples"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Fetch Code Quality Metrics
        id: fetch-metrics
        run: |
          # Fetch the Quality Gate status and code quality metrics
          # Replace 'your_project_key' with your actual project key
          PROJECT_KEY="aniketbancapp_sonar-samples"
          QUALITY_GATE_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r '.projectStatus.status')
          COVERAGE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage" | jq -r '.component.measures[0].value')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          echo "Code Coverage: $COVERAGE%"

          # Check if coverage is above 95% and quality gate passed
          if (( $(echo "$COVERAGE >= 15" | bc -l) )) && [ "$QUALITY_GATE_STATUS" = "OK" ]; then
            echo "Code quality meets 15 requirements."
            echo "quality_passed=true" >> $GITHUB_OUTPUT
          else
            echo "Code quality does not meet requirements."
            echo "quality_passed=false" >> $GITHUB_OUTPUT
          fi

  # Job for auto merging PR after SonarQube scan
  auto-merge:
    name: Auto Merge PR
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: needs.sonarqube-scan.outputs.quality_passed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Auto Merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          gh pr merge $PR_NUMBER --auto --squash
